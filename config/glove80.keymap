/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2022 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR

 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed by system behaviors/macros */
#include <dt-bindings/zmk/outputs.h>

/* Include behaviour includes needed by key binds - automatically generated */
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>

#define LEFT_HAND_KEYS   0  1  2  3  4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 58 59 60 61 62
#define RIGHT_HAND_KEYS  5  6  7  8  9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 52 53 54 55 56 57 63 64 65 66 67
#define THUMB_KEYS 68 69 72 73 76 77 70 71 74 75 77 79
#define HM_TAPPING_TERM_FAST 150
#define HYPER 3

/ {
    /* Glove80 system behavior & macros */
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 1>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    magic: magic_hold_tap {
        compatible = "zmk,behavior-hold-tap";
        label = "MAGIC_HOLD_TAP";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        bindings = <&mo>, <&rgb_ug_status_macro>;
    };

    /* Custom Defined Behaviors */

    hl: home_row_mods_left_hand {
        compatible = "zmk,behavior-hold-tap";
        flavor = "balanced";
        label = "HOME_ROW_MODS_LEFT_HAND";
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // FIXME: needs ZMK 3.2
        tapping-term-ms = <250>;
        quick-tap-ms = <160>;
        global-quick-tap; // with typing streak
    };

    hr: home_row_mods_right_hand {
        compatible = "zmk,behavior-hold-tap";
        flavor = "balanced";
        label = "HOME_ROW_MODS_RIGHT_HAND";
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        hold-trigger-on-release; // FIXME: needs ZMK 3.2
        tapping-term-ms = <250>;
        quick-tap-ms = <160>;
        global-quick-tap; // with typing streak
    };

    hls: hm_shift_l {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_FAST_LEFT";
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;

        flavor = "balanced";
        tapping-term-ms = <175>;
        quick_tap_ms = <175>;
        //global-quick-tap;
        //global-quick-tap-ms = <150>;         // requires PR #1387
        hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release;             // requires PR #1423
    };

   hrs: hm_shift_r {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS_FAST_RIGHT";
        #binding-cells = <2>;
        bindings = <&kp>, <&kp>;

        flavor = "balanced";
        tapping-term-ms = <175>;
        quick_tap_ms = <175>;
        //global-quick-tap;
        //global-quick-tap-ms = <150>;         // requires PR #1387
        hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
        //hold-trigger-on-release;             // requires PR #1423
    };
    /* Automatically generated keymap */
    keymap {
        compatible = "zmk,keymap";


        base_layer {
            bindings = <
     &kp F1      &kp F2      &kp F3       &kp F4        &kp F5                                                                                           &kp F6        &kp F7         &kp F8        &kp F9           &kp F10
     &kp EQUAL   &kp N1      &kp N2       &kp N3        &kp N4         &kp N5                                                                    &kp N6  &kp N7        &kp N8         &kp N9        &kp N0           &kp MINUS
     &kp DELETE  &kp Q       &kp W        &kp E         &kp R          &kp T                                                                     &kp Y   &kp U         &kp I          &kp O         &kp P            &kp BSLH
     &kp ESC     &kp A       &hl LGUI S   &hl LALT D    &hl LCTRL F    &kp G                                                                     &kp H   &hl RCTRL J   &hl RALT K     &sl RGUI L     &kp SEMI         &kp SQT
     &kp GRAVE   &kp Z       &kp X        &kp C         &kp V          &kp B    &sk LSHFT &sk LCTRL &sk LALT   &sk RALT   &sk RCTRL  &sk RSHFT   &kp N   &kp M         &kp COMMA      &kp DOT       &kp FSLH         &kp PG_UP
     &magic 2 0  &kp HOME    &kp END      &kp LEFT      &kp RIGHT               &kp BSPC  &kp TAB   &sl HYPER  &sl HYPER  &kp RET   &kp SPACE            &kp DOWN      &kp UP         &kp LBKT      &kp RBKT         &kp PG_DN
            >;
        };

        layer_Lower {
            bindings = <
     &trans         &trans          &trans          &trans           &trans                                                                      &trans &trans    &trans  &trans   &trans
     &trans         &trans          &trans          &trans           &trans   &trans                                                      &trans &trans &trans    &trans  &trans   &trans
     &trans         &kp Q           &kp W           &kp F            &kp P    &kp B                                                       &kp J  &kp L  &kp U     &kp Y   &kp SEMI &trans
     &trans         &kp A           &kp R           &kp S            &kp T    &kp G                                                       &kp M  &kp N  &kp E     &kp I   &kp O    &trans
     &trans         &kp Z           &kp X           &kp C            &kp D    &kp V    &trans  &trans  &to 0  &trans  &trans  &trans     &kp K  &kp H  &kp COMMA &kp DOT &kp FSLH &trans
     &magic 2 0     &trans          &trans          &trans           &trans            &trans  &trans  &trans  &trans  &trans  &trans            &trans &trans    &trans  &trans   &trans
            >;
        };

        layer_Magic {
            bindings = <
     &bt BT_CLR   &none            &none            &none            &none                                                                                     &none   &none   &none   &none  &bt BT_CLR_ALL
     &none        &none            &none            &none            &none            &none                                                            &none   &none   &none   &none   &none  &none
     &trans       &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                  &none   &none   &none   &none   &none  &none
     &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                  &none   &none   &none   &none   &none  &bootloader
     &none        &none            &none            &none            &none            &none       &bt_2   &bt_3  &none         &none   &none   &none   &none   &none   &none   &none   &none  &none
     &none        &none            &none            &none            &none                        &bt_0   &bt_1  &out OUT_USB  &none   &none   &none           &none   &none   &none   &none  &none
            >;
        };

        layer_hyper {
            bindings = <
       &none            &none            &none                  &none               &none                                                                                               &none             &none           &none                &none  &kp C_PLAY_PAUSE
       &none            &none            &none                  &none               &none             &none                                                           &none             &none             &none           &none                &none  &kp C_NEXT
       &none            &none            &kp LC(B)              &none               &none             &none                                                           &none             &none             &none           &none                &none  &kp C_PREVIOUS
       &none            &none            &none                  &none              &none             &none                                                            &none             &none             &none           &none                &none  &none
       &none            &kp LC(LS(Z))    &none                  &kp LC(LS(C))       &kp LC(LS(V))     &none      &none    &none        &none  &none  &none   &none    &none             &none             &none           &none                &none  &none
       &none            &none            &none                  &kp LG(LC(LEFT))    &kp LG(LC(RIGHT))            &none    &kp LA(TAB)  &none  &none  &none   &kp(LC(B))                 &none             &none           &none                &none  &none
            >;
        };
    };
};
